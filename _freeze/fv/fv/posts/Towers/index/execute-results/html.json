{
  "hash": "d1dbc49bb30d182c7ed64bf6568d66e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  message: false\n  warning: false\n  fig-show: no\ntitle: \"World's tallest towers (Top 6)\"\nauthor: \"FV\"\ndate: \"2023-03-13\"\ncategories: [code, analysis]\nimage: \"towers.png\"\n---\n\n\n\n\n\nWorld's tallest towers (Top 6)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# LIB\n\n{\nlibrary(tidyverse)\nlibrary(ggtextures)\nlibrary(magick)\nlibrary(ggflags)\n}\n\n# DATA\n\ndata <- tibble(\n  count = c(1,1,1,1,1,1),\n  n = c(634,600,553,540,468,435),\n  country =c(\"Japan\",\"China\",\"Canada\",\"Russia\",\"China\",\"Iran\"),\n  code =c(\"jp\",\"cn\",\"ca\",\"ru\",\"cn\",\"ir\"),\n  animal = c(\"Tokyo Sky Tree\", \n             \"Torre de Televisión\\nde Cantón\",\n             \"CN Tower\",\n             \"Torre Ostankino\", \n             \"Torre Perla Oriental\", \n             \"Torre Milad\"),\n  image = list(\n    image_read_svg(\"images/b_01.svg\"),\n    image_read_svg(\"images/b_02.svg\"),\n    image_read_svg(\"images/b_03.svg\"),\n    image_read_svg(\"images/b_04.svg\"),\n    image_read_svg(\"images/b_06.svg\"),\n    image_read_svg(\"images/b_08.svg\")\n  )\n)\n\n\ndata <- data %>%\n  mutate(iso3 = countrycode::countrycode(country,\n                                               origin = \"country.name.en\",\n                                               destination = \"iso3c\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# PLOT\nplot <- ggplot(data, aes(x=reorder(animal,-n), count, image = image)) +\n  geom_isotype_col() + xlab(\"\") + ylab(\"\")+\n  labs(title=\"\\nTorres más altas de mundo\", subtitle = \"\\n\",\n       caption = \"\\n\", fill= \"Districts\") +\n  geom_flag(aes(x=reorder(animal,-n),  y= -.05,\n                country=code), size=15 ) +\n  \n  geom_segment(aes(x = 0, y = (.95), xend = \"Torre Milad\", yend = (.95)), alpha=.05) +\n  geom_segment(aes(x = 0, y = ((600*0.95)/634), xend = \"Torre Milad\", yend = ((600*0.95)/634)), alpha=.05) +\n  geom_segment(aes(x = 0, y = ((553*0.95)/634), xend = \"Torre Milad\", yend = ((553*0.95)/634)), alpha=.05) +\n  geom_segment(aes(x = 0, y = ((540*0.95)/634), xend = \"Torre Milad\", yend = ((540*0.95)/634)), alpha=.05) +\n  geom_segment(aes(x = 0, y = ((468*0.95)/634), xend = \"Torre Milad\", yend = ((468*0.95)/634)), alpha=.05) +\n  geom_segment(aes(x = 0, y = ((435*0.95)/634), xend = \"Torre Milad\", yend = ((435*0.95)/634)), alpha=.05) +\n\n  annotate(x = .15, y = (1), \"text\", label= \"(m)\", fontface =2) +\n  annotate(x = .15, y = (.96), \"text\", label= \"634\", fontface =2) +\n  annotate(x = .15, y = ((600*0.95)/634) + 0.01, \"text\", label= \"600\", fontface =2) +\n  annotate(x = .15, y = ((553*0.95)/634) + 0.01, \"text\", label= \"553\", fontface =2) +\n  annotate(x = .15, y = ((540*0.95)/634) + 0.01, \"text\", label= \"540\", fontface =2) +\n  annotate(x = .15, y = ((468*0.95)/634) + 0.01, \"text\", label= \"468\", fontface =2) +\n  annotate(x = .15, y = ((435*0.95)/634) + 0.01, \"text\", label= \"435\", fontface =2) +\n \n  theme(text = element_text(size = 14, face = \"bold\"),\n    axis.text.y = element_blank(), \n    axis.ticks.y = element_blank(),\n    panel.spacing = unit(0, \"pt\"),\n    panel.border = element_blank(),\n    panel.grid.major.x = element_blank(),\n    strip.background = element_blank(),\n    strip.text = element_text(colour = \"black\"),\n    plot.title = element_text(size = 20, face=\"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 16, face=\"bold\", hjust = 0.5),\n    plot.caption = element_text(size = 10, face=\"bold\", hjust = 1),\n    panel.background = element_rect(fill = \"white\", colour = \"white\")) +\n    guides(colour = guide_legend(title = \"Location type\", face=\"bold\", \n                               override.aes = list(size=6,linetype=0)))\n```\n:::\n\n\n\n\n\n![](towers.png)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}