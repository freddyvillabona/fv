return flights
setwd("~/Documents/fv/fv")
setwd("~/Documents/fv/fv")
setwd("~/Documents/fv/fv/fv/fv")
setwd("~/Documents/fv/fv")
install.packages("ggtextures")
devtools::install_github("clauswilke/ggtextures")
setwd("~/Desktop/VERANO_2025")
library("tidyverse")
library("ggthemes")
library("ggHoriPlot")
library("showtext")
library("ggtext")
{
library("tidyverse")
library("ggthemes")
library("ggHoriPlot")
library("showtext")
library("ggtext")
}
utils::data(climate_CPH)
cutpoints <- climate_CPH  %>%
mutate(
outlier = between(
AvgTemperature,
quantile(AvgTemperature, 0.25, na.rm=T)-1.5*IQR(AvgTemperature, na.rm=T),
quantile(AvgTemperature, 0.75, na.rm=T)+1.5*IQR(AvgTemperature, na.rm=T))) %>%
filter(outlier)
library("dplyr")
{
library("tidyverse")
library("ggthemes")
library("ggHoriPlot")
library("showtext")
library("ggtext")
library("dplyr")
}
utils::data(climate_CPH)
cutpoints <- climate_CPH  %>%
mutate(
outlier = between(
AvgTemperature,
quantile(AvgTemperature, 0.25, na.rm=T)-1.5*IQR(AvgTemperature, na.rm=T),
quantile(AvgTemperature, 0.75, na.rm=T)+1.5*IQR(AvgTemperature, na.rm=T))) %>%
filter(outlier)
ori <- sum(range(cutpoints$AvgTemperature))/2
sca <- seq(range(cutpoints$AvgTemperature)[1], range(cutpoints$AvgTemperature)[2], length.out = 7)[-4]
# fonts
font_add_google("Luckiest Guy","ramp")
font_add_google("Bebas Neue","beb")
font_add_google("Fira Sans","fira")
font_add_google("Raleway","ral")
font_add_google("Bitter","bit")
showtext_auto()
plot <-  ggplot(data = climate_CPH) +
geom_horizon(aes(date_mine,
AvgTemperature,
fill = ..Cutpoints..),
origin = ori, horizonscale = sca) +
scale_fill_manual(values = c("#5A101C","#BF4149","#f1d2ce","#CDE1F0","#4C8BBF","#102F63") ) +
facet_grid(Year~., switch = "y", scales = "free", space = "free") +
theme_few() +
theme(
text = element_text(family = "fira"),
panel.spacing.y=unit(0, "lines"),
strip.text.y.left = element_text(size = 16, angle = 0) ,
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size=30),
legend.position = "bottom",
axis.text=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)
) +
scale_x_date(expand=c(0,0),
date_breaks = "1 month",
date_labels = "%b") +
xlab('\n') +
ggtitle('\nTemperatura media en Copenhague, Dinamarca\n (1995 - 2019)',
'\n') +
guides(fill=guide_legend(title="Temperatura °C"))
plot
plot
ggplot(data = climate_CPH) +
geom_horizon(aes(date_mine,
AvgTemperature,
fill = ..Cutpoints..),
origin = ori, horizonscale = sca) +
scale_fill_manual(values = c("#5A101C","#BF4149","#f1d2ce","#CDE1F0","#4C8BBF","#102F63") ) +
facet_grid(Year~., switch = "y", scales = "free", space = "free") +
theme_few() +
theme(
text = element_text(family = "fira"),
panel.spacing.y=unit(0, "lines"),
strip.text.y.left = element_text(size = 16, angle = 0) ,
axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
panel.border = element_blank(),
plot.title = element_text(size=30),
legend.position = "bottom",
axis.text=element_text(size=16),
legend.text = element_text(size=16),
legend.title = element_text(size=16)
) +
scale_x_date(expand=c(0,0),
date_breaks = "1 month",
date_labels = "%b") +
xlab('\n') +
ggtitle('\nTemperatura media en Copenhague, Dinamarca\n (1995 - 2019)',
'\n') +
guides(fill=guide_legend(title="Temperatura °C"))
memory. limit(size=4000000000) #set memory limit library(tidyverse) #wrangling and ggplot library(sf) #sf features for polygons etc
memory. limit(size=4000000000) #set memory limit library(tidyverse) #wrangling and ggplot library(sf) #sf features for polygons etc
library(rayshader) #3d rendering library(here) #working directory management
library(raster) #raster wrangling library(rgdal) #gis engine library(rgl) #3d rendering engine
library(rayrender) #3d rendering
installed.packages("ibrary(sf)")
installed.packages("rayshader")
devtools::install_github("tylermorganwall/rayshader")
install.packages(c("abind", "anytime", "AsioHeaders", "askpass", "BH", "bigD", "bio3d", "BiocManager", "bit", "bit64", "broom", "broom.helpers", "bslib", "car", "cards", "checkmate", "chromote", "class", "classInt", "climaemet", "cluster", "collapse", "commonmark", "corrplot", "countrycode", "cowplot", "credentials", "crosstable", "crul", "data.table", "dendextend", "distributional", "e1071", "ellmer", "emmeans", "fable", "fabletools", "FactoMineR", "feasts", "flextable", "fontawesome", "forecast", "foreign", "gapminder", "gdtools", "generics", "geofacet", "geosphere", "gert", "GGally", "ggdist", "ggforce", "ggfun", "ggiraph", "ggnewscale", "ggrepel", "ggstats", "gh", "gifski", "giscoR", "GPArotation", "gt", "gtExtras", "gtsummary", "haven", "hexbin", "Hmisc", "htmlTable", "httpuv", "httr2", "janitor", "KernSmooth", "knitr", "labelled", "later", "lattice", "leafem", "lme4", "locfit", "lubridate", "mapproj", "maps", "mapSpain", "markdown", "MASS", "Matrix", "MatrixModels", "memisc", "mgcv", "mime", "miniUI", "minqa", "mvtnorm", "nlme", "nloptr", "nnet", "officer", "openssl", "osmextract", "patchwork", "pbapply", "pbkrtest", "PerformanceAnalytics", "pkgdown", "plm", "progressr", "PROJ", "proj4", "promises", "psych", "quantmod", "quantreg", "r5r", "ragg", "rbibutils", "rcartocolor", "RcppEigen", "Rdpack", "readxl", "reprex", "rmarkdown", "rnaturalearth", "rpart", "RSQLite", "rstudioapi", "rsvg", "s2", "sandwich", "sass", "sessioninfo", "sf", "shiny", "skimr", "slider", "SparseM", "spatial", "spData", "stars", "stringi", "survival", "svglite", "sys", "textshaping", "tidygeocoder", "tidyterra", "tidytuesdayR", "timeDate", "tinytex", "tmap", "tmaptools", "tseries", "tsibble", "tzdb", "units", "urltools", "usethis", "usmap", "usmapdata", "uuid", "V8", "webshot2", "websocket", "wk", "xfun", "XML", "xml2", "xts", "yaml", "yulab.utils", "zip", "zoo"))
library(rayshader) #3d rendering library(here) #working directory management
library(raster) #raster wrangling library(rgdal) #gis engine library(rgl) #3d rendering engine
ibrary(sf)
library(sf)
library(rayshader) #3d rendering library(here) #working directory management
library(raster) #raster wrangling library(rgdal) #gis engine library(rgl) #3d rendering engine
installed.packages("rayshader")
installed.package("rayshader")
insinstall.
install.packages(rayshader)
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
devtools::install_github("tylermorganwall/rayshader")
library(rayshader)
installed.packages("rayshader")
install.packages("rayshader")
library(rayshader)
download.file("https://tylermw.com/data/dem_01.tif.zip", loadzip)
localtif = raster::raster(unzip(loadzip, "dem_01.tif"))
unlink(loadzip)
#And convert it to a matrix:
elmat = raster_to_matrix(localtif)
library(rayshader)
memory. limit(size=4000000000) #set memory limit
library(tidyverse) #wrangling and ggplot
library(sf) #sf features for polygons etc
library(rayshader) #3d rendering library(here) #working directory management
library(raster) #raster wrangling library(rgdal) #gis engine
library(rgl) #3d rendering engine library(rayrender) #3d rendering
elev_img <- raster:: raster(paste0(here(), "||datal \DHM25_MM_ASCII_GRIDI \ASCII_GRID_ 1part
library(tidyverse) #wrangling and ggplot
library(rayshader) #3d rendering
library(here) #working directory management
library(raster) #raster wrangling
library(rgdal) #gis engine
library(rgl) #3d rendering engine
library(rayrender) #3d rendering
# geotiff of elevation for transect (pre-processed in qgis for crs reasons)
elev_img <- raster::raster(paste0(here(), "\\data\\dent blanche\\dent_blanche_swissalti3D_2m.tif"))
plot(elev_img)
library(rayshader)
library(terra)
# Load a raster file
loadzip <- tempfile()
download.file("https://tylermw.com/data/dem_01.tif.zip", loadzip)
localtif <- raster::raster(unzip(loadzip, "dem_01.tif"))
unlink(loadzip)
# Convert the raster to a matrix
elevation_matrix <- raster_to_matrix(localtif)
elevation_matrix %>%
sphere_shade(texture = "desert") %>%
plot_map()
elevation_matrix %>%
rayshader::sphere_shade(texture = "desert") %>%
plot_map()
# Convert the raster to a matrix
elevation_matrix <- raster_to_matrix(localtif)
# Convert the raster to a matrix
elevation_matrix <- rayshader::raster_to_matrix(localtif)
elevation_matrix %>%
rayshader::sphere_shade(texture = "desert") %>%
plot_map()
elmat %>%
sphere_shade() %>%
plot_map()
elmat %>%
sphere_shade() %>%
rayshader::plot_map()
elevation_matrix %>%
rayshader::sphere_shade(texture = "desert") %>%
rayshader::plot_map()
elevation_matrix %>%
rayshader::sphere_shade(texture = "desert") %>%
rayshader::plot_map()
setwd("~/Documents/fv/fv")
setwd("~/Documents/fv/fv")
setwd("~/Documents/fv")
