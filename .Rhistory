1 + 1
quarto preview mysite
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess")
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
library(htmlwidgets)
library(htmlwidgets)
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
#| label: setup
#| include: false
library(tidyverse)
smaller <- diamonds |>
filter(carat <= 2.5)
#| label: setup
#| include: false
library(tidyverse)
smaller <- diamonds |>
filter(carat <= 2.5)
library(tidyverse)
library(leaflet)
smaller <- diamonds |>
filter(carat <= 2.5)
# Lib:
library("dplyr")
library("spData")
library("hrbrthemes")
library("ggplot2")
# Dat:
s <- read.csv("s.csv")
# Lib:
library("dplyr")
library("spData")
library("hrbrthemes")
library("ggplot2")
# Dat:
s <- read.csv("s.csv")
names(s)
legend_size <- c(8,9,10,11,12)
ggplot(s, aes(gdpPercap, emissions)) +
ggtitle("Emisiones de CO2, PIB per cápita y población por países - 2020") +
ylab("Emisiones de CO2 (toneladas métricas por persona)") +
xlab("PIB per cápita") +
geom_point(aes(size = pop,
fill = Continente),
shape = 21,
alpha = 0.7) +
scale_fill_viridis_d(
guide = guide_legend(override.aes = list(size = 10))) +
scale_size(range = c(0.1, 30),
name="Población (mills.)",
breaks = 1000000 * c(250, 500, 750, 1000, 1250),
labels = c("280", "560", "840", "1120", "1400"),
) +
geom_text(aes(x = gdpPercap, y = emissions+1.5, label = country),
color = "blue",
data = filter(s, pop > 1000000000 | country %in% c("Norway",
"Singapore",
"Luxembourg",
"United States",
"Switzerland",
"Spain",
"Brazil",
"Japan",
"Qatar",
"Kuwait",
"Chile",
"Netherlands",
"Trinidad and Tobago",
"United Kingdom"))) +
theme_ipsum(axis_title_size = 14,
base_family = "TT Arial") +
theme(legend.position="bottom",
legend.box = "vertical")
# Lib:
library("dplyr")
library("spData")
library("hrbrthemes")
library("ggplot2")
# Dat:
s <- read.csv("s.csv")
names(s)
legend_size <- c(8,9,10,11,12)
ggplot(s, aes(gdpPercap, emissions)) +
ggtitle("Emisiones de CO2, PIB per cápita y población por países - 2020") +
ylab("Emisiones de CO2 (toneladas métricas por persona)") +
xlab("PIB per cápita") +
geom_point(aes(size = pop,
fill = Continente),
shape = 21,
alpha = 0.7) +
scale_fill_viridis_d(
guide = guide_legend(override.aes = list(size = 10))) +
scale_size(range = c(0.1, 30),
name="Población (mills.)",
breaks = 1000000 * c(250, 500, 750, 1000, 1250),
labels = c("280", "560", "840", "1120", "1400"),
) +
geom_text(aes(x = gdpPercap, y = emissions+1.5, label = country),
color = "blue",
data = filter(s, pop > 1000000000 | country %in% c("Norway",
"Singapore",
"Luxembourg",
"United States",
"Switzerland",
"Spain",
"Brazil",
"Japan",
"Qatar",
"Kuwait",
"Chile",
"Netherlands",
"Trinidad and Tobago",
"United Kingdom"))) +
theme_ipsum(axis_title_size = 14) +
theme(legend.position="bottom",
legend.box = "vertical")
# :)
setwd("/Users/fv/Documents/R/UCRANIA")
library('sf')
library("ggplot2")
library("dplyr")
library("stringr")
uc <- read_sf('ucraniano/Ucraniano_Parlantes_Ucrania.shp')
ru <- read_sf('ruso/Ruso_Parlantes_Ucrania.shp')
uc <-uc %>%
st_as_sf()
ru <- ru %>%
st_as_sf()
class(ru)
A <- ggplot(data = ru) +
ggtitle("Україна - Відсоток російськомовних") +
xlab("") +
ylab("") +
geom_sf(aes(fill=PorcRus), show.legend = T, size = 0.05) +
scale_fill_viridis_c(alpha = .6) +
geom_sf_text(aes(label =Ucraniano),size=3,family="sans")+
# geom_label(aes(fill = Ucraniano), colour = "white", fontface = "bold") +
#theme_void() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 20)) +
labs(fill= "Відсоток")
A
ru$Español <- gsub("Ciudad de Kiev","Kiev ",ru$Español)
ru$Español <- gsub("República Autónoma de Crimea","Crimea",ru$Español)
library("ggspatial")
es <- ggplot(data = ru) +
ggtitle("Porcentaje de ruso-parlantes en Ucrania") +
xlab("") +
ylab("") +
geom_sf(aes(fill=PorcRus), show.legend = T, size = 0.05) +
scale_fill_viridis_c(alpha = .6, direction = -1) +
geom_sf_text(aes(label =Español),size=3,family="sans")+
theme(plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 20),
legend.position="bottom") +
labs(fill= "%") +
annotation_scale()
es
library('sf')
library("ggplot2")
library("dplyr")
library("stringr")
ru <- read_sf('ruso/Ruso_Parlantes_Ucrania.shp')
ru <- ru %>%
st_as_sf()
A <- ggplot(data = ru) +
ggtitle("Україна - Відсоток російськомовних") +
xlab("") +
ylab("") +
geom_sf(aes(fill=PorcRus), show.legend = T, size = 0.05) +
scale_fill_viridis_c(alpha = .6) +
geom_sf_text(aes(label =Ucraniano),size=3,family="sans")+
# geom_label(aes(fill = Ucraniano), colour = "white", fontface = "bold") +
#theme_void() +
theme(plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 20)) +
labs(fill= "Відсоток")
A
library("ggspatial")
ru$Español <- gsub("Ciudad de Kiev","Kiev ",ru$Español)
ru$Español <- gsub("República Autónoma de Crimea","Crimea",ru$Español)
es <- ggplot(data = ru) +
ggtitle("Porcentaje de ruso-parlantes en Ucrania") +
xlab("") +
ylab("") +
geom_sf(aes(fill=PorcRus), show.legend = T, size = 0.05) +
scale_fill_viridis_c(alpha = .6, direction = -1) +
geom_sf_text(aes(label =Español),size=3,family="sans")+
theme(plot.title = element_text(size = 20, face = "bold"),
plot.subtitle = element_text(size = 20),
legend.position="bottom") +
labs(fill= "%") +
annotation_scale()
es
setwd("/Users/fv/Documents/R/mapa_florida")
rm(list=ls())
library(FedData)
library(raster)
library(rgdal)
library(sf)
library(tmap)
library(rgdal)
library(FedData)
library(raster)
library(rgdal)
library(sf)
library(tmap)
library(rgdal)
NLCD <- raster("NLCD2016_2021.tif")
A.O.I <- sf::st_read("Primary_Zone.shp")
A.O.I <- sf::as_Spatial(st_geometry(A.O.I),
IDs = as.character(1:nrow(A.O.I)))
AOI <- spTransform(A.O.I,
CRS("+proj=longlat
+datum=WGS84
+no_defs"))
cropped_extent <- crop(NLCD, AOI)
ext <- extent(AOI)
r <- crop(NLCD, ext)
capa <- mask(r, AOI)
class(capa)
legend <- pal_nlcd()
legend
paletap <- legend$Color
Water <- legend$Color[1]
Dev_urb <- legend$Color[6]
Agriculture <- legend$Color[18]
Grassland <- legend$Color[13]
Upland_f <- legend$Color[10]
Wetland_f <- legend$Color[8]
E_W_Veg <- legend$Color[20]
paleta3 <- c(Water, Dev_urb,Agriculture,
Grassland, Upland_f,Wetland_f,
E_W_Veg)
a <- tm_shape(capa) +
tm_raster(style = "cont", title = " ",
palette = paletap, legend.show = F)+
tm_legend(outside = T) +
tm_graticules(col = "grey90")+
tm_scale_bar(position = c("left", "bottom"))+
tm_layout(main.title = "FLORIDA STUDY AREA CROPPED EXTENT",
title.size=3,
#title.position = c('right', 'top')
main.title.position = "CENTER") +
tm_facets(free.scales=T) +
tm_add_legend('symbol',
col = paleta3,
border.col = "grey40",
size = 2,
labels = c('Water',
'Developed/Urban',
"Agriculture",
"Grassland/Shrib",
"Upland Forest",
"Wetland Forest",
"Emergent Wetland Vegetation"
),
title=" ")
a
setwd("/Users/fv/Desktop/DESKP/R")
library("leaflet")
library("dplyr")
library("leaflet")
library("htmlwidgets")
library("htmltools")
puntos <- read.csv(textConnection("
City,Lat,Long,Pop,col
Hobart, 35.027093, -99.094420, 100000, purple
Granite, 34.956771, -99.397572, 100000, green
Lawton, 34.643892, -98.463141, 100000, yellow
Altus, 34.634052, -99.080661, 100000, red
"))
addLegendCustom <- function(map, colors, labels, sizes, opacity = 1){
colorAdditions <- paste0(colors, "; width:", sizes, "px; height:", sizes, "px")
labelAdditions <- paste0("<div style='display: inline-block;height: ",
sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>",
labels, "</div>")
return(addLegend(map, colors = colorAdditions,
position = c("topleft"),
labels = labelAdditions, opacity = opacity))
}
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,1);
font-weight: bold;
font-size: 32px;
}
"))
titulo <- tags$div(
tag.map.title, HTML("Estaciones instaladas en torres eléctricas")
)
leaflet(puntos) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = .2,
radius = ~(Pop), popup = ~City,
color =  ~col, fillOpacity = .2) %>%
addCircles(-99.385918, 34.965710, weight = 1, fillOpacity = 1,
radius = 3000, color =  "green")   %>%
addCircles(-99.096944, 35.019167, weight = 1, fillOpacity = 1,
radius = 3000, color =  "purple")   %>%
addCircles(-99.080661,   34.634052, weight = 1, fillOpacity = 1,
radius = 3000, color =  "red")   %>%
addCircles(-98.475278,   34.576667, weight = 1, fillOpacity = 1,
radius = 3000, color =  "yellow")   %>%
addProviderTiles(providers$Stamen.Toner)  %>%
addLegendCustom(colors = c("green", "green", "green", "purple",
"yellow", "yellow","red"),
labels = c("KTIJ",
"KHIM",
"KHWL",
"KTJS",
"KBZQ",
"K234BD",
"KJCM"),
sizes = c(25, 25, 25, 25, 25, 25, 25)) %>%
addControl(titulo, position = "topleft", className="map-title")
library("leaflet")
library("dplyr")
library("leaflet")
library("htmlwidgets")
library("htmltools")
puntos <- read.csv(textConnection("
City,Lat,Long,Pop,col
Hobart, 35.027093, -99.094420, 100000, purple
Granite, 34.956771, -99.397572, 100000, green
Lawton, 34.643892, -98.463141, 100000, yellow
Altus, 34.634052, -99.080661, 100000, red
"))
addLegendCustom <- function(map, colors, labels, sizes, opacity = 1){
colorAdditions <- paste0(colors, "; width:", sizes, "px; height:", sizes, "px")
labelAdditions <- paste0("<div style='display: inline-block;height: ",
sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>",
labels, "</div>")
return(addLegend(map, colors = colorAdditions,
position = c("topleft"),
labels = labelAdditions, opacity = opacity))
}
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,1);
font-weight: bold;
font-size: 32px;
}
"))
titulo <- tags$div(
tag.map.title, HTML("Stations installed on electricity pylons")
)
leaflet(puntos) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = .2,
radius = ~(Pop), popup = ~City,
color =  ~col, fillOpacity = .2) %>%
addCircles(-99.385918, 34.965710, weight = 1, fillOpacity = 1,
radius = 3000, color =  "green")   %>%
addCircles(-99.096944, 35.019167, weight = 1, fillOpacity = 1,
radius = 3000, color =  "purple")   %>%
addCircles(-99.080661,   34.634052, weight = 1, fillOpacity = 1,
radius = 3000, color =  "red")   %>%
addCircles(-98.475278,   34.576667, weight = 1, fillOpacity = 1,
radius = 3000, color =  "yellow")   %>%
addProviderTiles(providers$Stamen.Toner)  %>%
addLegendCustom(colors = c("green", "green", "green", "purple",
"yellow", "yellow","red"),
labels = c("KTIJ",
"KHIM",
"KHWL",
"KTJS",
"KBZQ",
"K234BD",
"KJCM"),
sizes = c(25, 25, 25, 25, 25, 25, 25)) %>%
addControl(titulo, position = "topleft", className="map-title")
