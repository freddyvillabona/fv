"yellow", "yellow","red"),
labels = c("KTIJ",
"KHIM",
"KHWL",
"KTJS",
"KBZQ",
"K234BD",
"KJCM"),
sizes = c(25, 25, 25, 25, 25, 25, 25)) %>%
addControl(titulo, position = "topleft", className="map-title")
library("leaflet")
library("dplyr")
library("leaflet")
library("htmlwidgets")
library("htmltools")
puntos <- read.csv(textConnection("
City,Lat,Long,Pop,col
Hobart, 35.027093, -99.094420, 100000, purple
Granite, 34.956771, -99.397572, 100000, green
Lawton, 34.643892, -98.463141, 100000, yellow
Altus, 34.634052, -99.080661, 100000, red
"))
addLegendCustom <- function(map, colors, labels, sizes, opacity = 1){
colorAdditions <- paste0(colors, "; width:", sizes, "px; height:", sizes, "px")
labelAdditions <- paste0("<div style='display: inline-block;height: ",
sizes, "px;margin-top: 4px;line-height: ", sizes, "px;'>",
labels, "</div>")
return(addLegend(map, colors = colorAdditions,
position = c("topleft"),
labels = labelAdditions, opacity = opacity))
}
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,1);
font-weight: bold;
font-size: 32px;
}
"))
titulo <- tags$div(
tag.map.title, HTML("Estaciones instaladas en torres elÃ©ctricas")
)
leaflet(puntos) %>% addTiles() %>%
addCircles(lng = ~Long, lat = ~Lat, weight = .2,
radius = ~(Pop), popup = ~City,
color =  ~col, fillOpacity = .2) %>%
addCircles(-99.385918, 34.965710, weight = 1, fillOpacity = 1,
radius = 3000, color =  "green")   %>%
addCircles(-99.096944, 35.019167, weight = 1, fillOpacity = 1,
radius = 3000, color =  "purple")   %>%
addCircles(-99.080661,   34.634052, weight = 1, fillOpacity = 1,
radius = 3000, color =  "red")   %>%
addCircles(-98.475278,   34.576667, weight = 1, fillOpacity = 1,
radius = 3000, color =  "yellow")   %>%
addProviderTiles(providers$Stamen.Toner)  %>%
addLegendCustom(colors = c("green", "green", "green", "purple",
"yellow", "yellow","red"),
labels = c("KTIJ",
"KHIM",
"KHWL",
"KTJS",
"KBZQ",
"K234BD",
"KJCM"),
sizes = c(25, 25, 25, 25, 25, 25, 25)) %>%
addControl(titulo, position = "topleft", className="map-title")
library("tidyverse")
library("showtext")
library("lubridate")
library("tidyverse")
library("showtext")
library("lubridate")
dat <- tidytuesdayR::tt_load(2023, week = 15)
egg_prod <- dat$`egg-production`
View(egg_prod)
txt <- "grey20"
pal <- c('#efeef3', '#bfac9e', '#be8b60', '#8a5430', '#5a2e23')
pal <- colorRampPalette(pal)(18)
accent <- tail(pal, 1)
bg <- pal[2]
font_add("fa-brands", regular = "fa-brands-400.ttf")
font_add("fa-solid", regular = "fa-solid-900.ttf")
font_add_google("Barlow", "bar")
showtext_auto()
ggplot(data=df_base0) +
geom_line(aes(date, n_eggs), df_base, colour = txt, alpha = 0.3) +
geom_point(aes(date, n_eggs), df_base, colour = txt, alpha = 0.7) +
geom_ribbon(aes(date, ymin = 7000, ymax = n_eggs), df_base, fill = pal[18],
alpha = 0.1) +
geom_line(aes(date, trend), df_trend, size = 3, colour = pal[8]) +
geom_line(aes(date, trend), df_trend, size = 2, colour = pal[4]) +
geom_ribbon(aes(date, ymin = trend, ymax = .mean),
filter(df_trend, !is.na(.mean)), fill = pal[8], alpha = 0.5) +
geom_line(aes(date, .mean), df_fcst, size = 3, colour = pal[4], linetype = 2) +
geom_richtext(aes(x=date, y=7500, label = egg1), df_egg2, label.color = NA,
fill = NA, size = 40) +
geom_point(aes(date, trend), df_egg, size = 18, colour = pal[2]) +
geom_text(aes(date, trend, label = egg_lab), df_egg, family = ft, size =6,
colour = txt, fontface = "bold") +
annotate("text", x = ymd("2016-07-01"), y = 8600, label = title, family = ft,
size = 12, fontface = "bold", colour = txt, hjust = 0) +
annotate("text", x = ymd("2016-07-01"), y = 8500, label = str_wrap(subtitle, 60),
family = ft, size = 18, colour = txt, hjust = 0, lineheight = 0.35) +
annotate("richtext", x = ymd("2021-04-01"), y = 7100, label = caption,
family = ft, size = 14, colour = txt, hjust = 0, lineheight = 0.5,
label.color = NA,
fill = NA) +
scale_x_date(breaks = seq.Date(ymd("2016-01-01"), ymd("2021-01-01"), "year"),
limits = c(ymd("2016-07-01"), ymd("2022-09-01")), date_labels = "%Y") +
scale_y_continuous(breaks = seq(7000, 8500, 500), label = c("7.0B", "7.5B",
"8.0B", "8.5B")) +
scale_fill_gradientn(colours = rev(pal)) +
coord_cartesian(clip = "off") +
theme_void() +
theme(
text = element_text(family = ft, size = 10, lineheight = 0.3, colour = txt),
plot.background = element_rect(fill = "#ffffff", colour = bg),
plot.margin = margin(b = 20, t = 50, r = 50, l = 50),
axis.text = element_text(),
legend.position = "none"
)
# make base table
df_base <- egg_prod |>
filter(
prod_type == "table eggs",
prod_process == "all"
) |>
mutate(
n_eggs = n_eggs/1e6,
date = floor_date(observed_month, "month"),
month = 1:n(),
n_egg_p_hen = n_eggs/n_hens,
grp = 1:n()
)
df_base0 <- df_base |>
bind_rows(
df_base |>
mutate(grp = 1:n()+1)
) |>
arrange(month) |>
group_by(grp) |>
mutate(fill = tail(n_eggs, 1))
font_add("fa-brands", regular = "fa-brands-400.ttf")
font_add("fa-solid", regular = "fa-solid-900.ttf")
font_add_google("Barlow", "bar")
showtext_auto()
ggplot(data=df_base0) +
geom_line(aes(date, n_eggs), df_base, colour = txt, alpha = 0.3) +
geom_point(aes(date, n_eggs), df_base, colour = txt, alpha = 0.7) +
geom_ribbon(aes(date, ymin = 7000, ymax = n_eggs), df_base, fill = pal[18],
alpha = 0.1) +
geom_line(aes(date, trend), df_trend, size = 3, colour = pal[8]) +
geom_line(aes(date, trend), df_trend, size = 2, colour = pal[4]) +
geom_ribbon(aes(date, ymin = trend, ymax = .mean),
filter(df_trend, !is.na(.mean)), fill = pal[8], alpha = 0.5) +
geom_line(aes(date, .mean), df_fcst, size = 3, colour = pal[4], linetype = 2) +
geom_richtext(aes(x=date, y=7500, label = egg1), df_egg2, label.color = NA,
fill = NA, size = 40) +
geom_point(aes(date, trend), df_egg, size = 18, colour = pal[2]) +
geom_text(aes(date, trend, label = egg_lab), df_egg, family = ft, size =6,
colour = txt, fontface = "bold") +
annotate("text", x = ymd("2016-07-01"), y = 8600, label = title, family = ft,
size = 12, fontface = "bold", colour = txt, hjust = 0) +
annotate("text", x = ymd("2016-07-01"), y = 8500, label = str_wrap(subtitle, 60),
family = ft, size = 18, colour = txt, hjust = 0, lineheight = 0.35) +
annotate("richtext", x = ymd("2021-04-01"), y = 7100, label = caption,
family = ft, size = 14, colour = txt, hjust = 0, lineheight = 0.5,
label.color = NA,
fill = NA) +
scale_x_date(breaks = seq.Date(ymd("2016-01-01"), ymd("2021-01-01"), "year"),
limits = c(ymd("2016-07-01"), ymd("2022-09-01")), date_labels = "%Y") +
scale_y_continuous(breaks = seq(7000, 8500, 500), label = c("7.0B", "7.5B",
"8.0B", "8.5B")) +
scale_fill_gradientn(colours = rev(pal)) +
coord_cartesian(clip = "off") +
theme_void() +
theme(
text = element_text(family = ft, size = 10, lineheight = 0.3, colour = txt),
plot.background = element_rect(fill = "#ffffff", colour = bg),
plot.margin = margin(b = 20, t = 50, r = 50, l = 50),
axis.text = element_text(),
legend.position = "none"
)
# set as tsibble for forecasting
df_ts <- df_base |>
as_tsibble(index = month)
library("tidyverse")
library("showtext")
library("lubridate")
dat <- tidytuesdayR::tt_load(2023, week = 15)
egg_prod <- dat$`egg-production`
txt <- "grey20"
pal <- c('#efeef3', '#bfac9e', '#be8b60', '#8a5430', '#5a2e23')
pal <- colorRampPalette(pal)(18)
accent <- tail(pal, 1)
bg <- pal[2]
# make base table
df_base <- egg_prod |>
filter(
prod_type == "table eggs",
prod_process == "all"
) |>
mutate(
n_eggs = n_eggs/1e6,
date = floor_date(observed_month, "month"),
month = 1:n(),
n_egg_p_hen = n_eggs/n_hens,
grp = 1:n()
)
df_base0 <- df_base |>
bind_rows(
df_base |>
mutate(grp = 1:n()+1)
) |>
arrange(month) |>
group_by(grp) |>
mutate(fill = tail(n_eggs, 1))
font_add("fa-brands", regular = "fa-brands-400.ttf")
font_add("fa-solid", regular = "fa-solid-900.ttf")
font_add_google("Barlow", "bar")
showtext_auto()
ggplot(data=df_base0) +
geom_line(aes(date, n_eggs), df_base, colour = txt, alpha = 0.3) +
geom_point(aes(date, n_eggs), df_base, colour = txt, alpha = 0.7) +
geom_ribbon(aes(date, ymin = 7000, ymax = n_eggs), df_base, fill = pal[18],
alpha = 0.1) +
geom_line(aes(date, trend), df_trend, size = 3, colour = pal[8]) +
geom_line(aes(date, trend), df_trend, size = 2, colour = pal[4]) +
geom_ribbon(aes(date, ymin = trend, ymax = .mean),
filter(df_trend, !is.na(.mean)), fill = pal[8], alpha = 0.5) +
geom_line(aes(date, .mean), df_fcst, size = 3, colour = pal[4], linetype = 2) +
geom_richtext(aes(x=date, y=7500, label = egg1), df_egg2, label.color = NA,
fill = NA, size = 40) +
geom_point(aes(date, trend), df_egg, size = 18, colour = pal[2]) +
geom_text(aes(date, trend, label = egg_lab), df_egg, family = ft, size =6,
colour = txt, fontface = "bold") +
annotate("text", x = ymd("2016-07-01"), y = 8600, label = title, family = ft,
size = 12, fontface = "bold", colour = txt, hjust = 0) +
annotate("text", x = ymd("2016-07-01"), y = 8500, label = str_wrap(subtitle, 60),
family = ft, size = 18, colour = txt, hjust = 0, lineheight = 0.35) +
annotate("richtext", x = ymd("2021-04-01"), y = 7100, label = caption,
family = ft, size = 14, colour = txt, hjust = 0, lineheight = 0.5,
label.color = NA,
fill = NA) +
scale_x_date(breaks = seq.Date(ymd("2016-01-01"), ymd("2021-01-01"), "year"),
limits = c(ymd("2016-07-01"), ymd("2022-09-01")), date_labels = "%Y") +
scale_y_continuous(breaks = seq(7000, 8500, 500), label = c("7.0B", "7.5B",
"8.0B", "8.5B")) +
scale_fill_gradientn(colours = rev(pal)) +
coord_cartesian(clip = "off") +
theme_void() +
theme(
text = element_text(family = ft, size = 10, lineheight = 0.3, colour = txt),
plot.background = element_rect(fill = "#ffffff", colour = bg),
plot.margin = margin(b = 20, t = 50, r = 50, l = 50),
axis.text = element_text(),
legend.position = "none"
)
txt <- "grey20"
pal <- c('#efeef3', '#bfac9e', '#be8b60', '#8a5430', '#5a2e23')
pal <- colorRampPalette(pal)(18)
accent <- tail(pal, 1)
bg <- pal[2]
font_add("fa-brands", regular = "assets/fonts/fontawesome-free-6.2.0-web/fa-brands-400.ttf")
font_add("fa-solid", regular = "assets/fonts/fontawesome-free-6.2.0-web/fa-solid-900.ttf")
font_add_google("Barlow", "bar")
showtext_auto()
ft <- "bar"
# make base table
df_base <- egg_prod |>
filter(
prod_type == "table eggs",
prod_process == "all"
) |>
mutate(
n_eggs = n_eggs/1e6,
date = floor_date(observed_month, "month"),
month = 1:n(),
n_egg_p_hen = n_eggs/n_hens,
grp = 1:n()
)
# binding like this to make the ribbons
df_base0 <- df_base |>
bind_rows(
df_base |>
mutate(grp = 1:n()+1)
) |>
arrange(month) |>
group_by(grp) |>
mutate(fill = tail(n_eggs, 1))
# set as tsibble for forecasting
df_ts <- df_base |>
as_tsibble(index = month)
# forecasting with fable
df_fcst <- df_ts |>
filter(month <= 42) |>
model(mod_ets = ETS(n_eggs)) |>
forecast(h = 14) |>
left_join(
df_base |>
select(date, month),
by = "month"
)
# estimating the trend from {feasts}
df_trend <- df_ts |>
model(stl = STL(n_eggs)) |>
components() |>
left_join(
df_ts |>
mutate(date = floor_date(observed_month, "month")) |>
select(date, month),
by = "month"
) |>
left_join(
df_fcst |>
as_tibble() |>
select(.mean, month),
by = "month"
)
# where the eggs go
df_egg <- df_trend |>
filter(month(date) == 1) |>
mutate(egg_lab = paste0(round(trend/1000, 1), "B"))
df_egg2 <- df_egg |>
filter(month==55)
# adding the trend estimates onto df_base0
df_base0 <- df_base0 |>
left_join(
df_trend |>
select(date, trend),
by = "date"
) |>
group_by(grp) |>
mutate(fill = max(trend))
# estimating the total loss of production
total_loss <- df_trend |>
filter(!is.na(.mean)) |>
as_tibble() |>
summarise(total = round(sum(.mean-trend)/1000, 1))
library("ggplot2")
segmentos = data.frame(
x= c(1.5, 1.5, 1.5),
xend = c(1.7, 1.7, 1.7),
y = c(90, 93, 96),
yend = c(90, 93, 96))
segmentos2 = data.frame(
y = c(50,50,50),
yend = c(50,50,50),
x= c(4, 4.5, 5),
xend = c(4.5, 5, 5.5))
lista <- colorRampPalette(c("white", "blue", "red"))(75)
ggplot(faithful, aes(x = eruptions, y = waiting)) +
geom_point(size=.5) +
xlim(0.5, 6) +
ylim(40, 110) +
geom_density_2d_filled(alpha = 0.8, bins=75) +
scale_fill_manual(values = lista) +
geom_segment(data=segmentos, mapping=aes(x=x, xend=xend, y=y, yend=yend), color= c("#EEEEFE", "#5356f6", "#D2565E"), linewidth=5) +
geom_segment(data=segmentos2, mapping=aes(x=x, xend=xend, y=y, yend=yend), color= c("#EEEEFE", "#5356f6", "#D2565E"), linewidth=3) +
geom_text(mapping=aes(label="Contornos con ggplot2", y=(110), x=3), size=6, color="black", fontface="bold") +
geom_text(mapping=aes(label="C", y=(90), x=1.8), size=3, color="black") +
geom_text(mapping=aes(label="B", y=(93), x=1.8), size=3, color="black") +
geom_text(mapping=aes(label="A", y=(96), x=1.8), size=3, color="black") +
geom_text(mapping=aes(label="0", y=(48), x=4), size=3, color="black") +
geom_text(mapping=aes(label="0.00972", y=(48), x=4.75), size=3, color="black") +
geom_text(mapping=aes(label="0.01944", y=(48), x=5.35), size=3, color="black") +
theme(
legend.position = "none",
plot.background=element_rect(fill="white", color="white"),
panel.background = element_rect(fill="white", color="white"),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_blank()
)
# LIBRERÃAS
library("dplyr")
library("ggplot2")
library("sf")
library("ggtext")
# UK SHAPEFILE
uk <- read_sf('uk/uk_shapefile.shp')
uk <- uk %>%
st_as_sf()
# DATOS (CSV)
data <- read.csv2("data.csv")
# LIBRERÃAS
library("dplyr")
library("ggplot2")
library("sf")
library("ggtext")
# UK SHAPEFILE
uk <- read_sf('uk/uk_shapefile.shp')
uk <- uk %>%
st_as_sf()
# DATOS (CSV)
data <- read.csv2("data.csv")
# UNIÃN (SHAPEFILE Y DATOS)
map_uk <- merge(uk, data, by = "Region")
map_uk <- map_uk %>%
st_as_sf()
# COLORES
pal <- colorRampPalette(c("#ffffcc", "#c7e9b4", "#7fcdbb",
"#41b6c4", "#2c7fb8"))(12)
# MAPA
ggplot(data = map_uk) +
xlab("") +
ylab("") +
geom_sf(aes(fill=Mean), show.legend = T, size = 0.05, lwd = 0) +
scale_fill_gradientn(colours = pal) +
geom_sf_text(aes(label =Region),size=2.5, colour="black")+
# theme_void() +
theme(plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1)) +
labs(title="Ventas por mes de una tienda en lÃ­nea",
subtitle = "\nReino Unido",
caption = "Datos: Anonimo - 2023",
fill= "Ventas")
# LIB
library("dplyr")
library("ggplot2")
library("sf")
library("ggtext")
# UK SHAPEFILE
uk <- read_sf('uk/uk_shapefile.shp')
uk <- uk %>%
st_as_sf()
# DATA (CSV)
data <- read.csv2("data.csv")
# (SHAPEFILE AND DATOS)
map_uk <- merge(uk, data, by = "Region")
map_uk <- map_uk %>%
st_as_sf()
# COLORS
pal <- colorRampPalette(c("#ffffcc", "#c7e9b4", "#7fcdbb",
"#41b6c4", "#2c7fb8"))(12)
# MAP1
ggplot(data = map_uk) +
xlab("") +
ylab("") +
geom_sf(aes(fill=Mean), show.legend = T, size = 0.05, lwd = 0) +
scale_fill_gradientn(colours = pal) +
geom_sf_text(aes(label =Region),size=2.5, colour="black")+
theme(plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1)) +
labs(title="Sales per month ",
subtitle = "\nUK",
caption = "Data: uml - 2023",
fill= "Ventas")
# MAP2
ggplot(data = map_uk) +
xlab("") +
ylab("") +
geom_sf(aes(fill=Mean), show.legend = T, size = 0.05, lwd = 0) +
scale_fill_gradientn(colours = pal) +
geom_sf_text(aes(label =Region),size=2.5, colour="black")+
theme_void() +
theme(plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1)) +
labs(title="Sales per month ",
subtitle = "\nUK",
caption = "Data: uml - 2023",
fill= "Ventas")
setwd("/Users/fv/Desktop/carpeta sin tiÌtulo/leaflet")
{
library("readxl")
library("leaflet")
library("leafem")
}
logo <- "https://www.r-project.org/logo/Rlogo.svg"
data <- read_excel("dat.xlsx")
d <- 1
icons <- awesomeIcons(
icon = "beer",
iconColor = 'black',
library = 'ion'
)
map <- leaflet(data) %>%
addTiles() %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addCircles(lng = ~data$long,
lat = ~data$lat,
weight = 8,
color="red",
radius = ~d,
popup = ~data$text,
label = ~data$text,
group="Location") %>%
addAwesomeMarkers(lng = ~data$long,
lat = ~data$lat,icon=icons,
label = ~data$text,
group="Location") %>%
# Layers control
addLayersControl(
baseGroups = c("OSM (default)",  "Toner Lite"),
overlayGroups = c("Location"),
options = layersControlOptions(collapsed = FALSE))  %>%
addScaleBar() %>%
addMouseCoordinates() %>%
addLogo(logo, url = "https://www.r-project.org/logo/")
map
