axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(size = 24, hjust = 1, face = "bold"),
plot.subtitle = element_text(size = 20)
)
setwd("/Users/fv/Documents/R/ABRIL_2023/UK")
Enf <- c("Enfermedades cardiovasculares", "Enfermedades pulmonares", "Diabetes", "Hipertensión",
"Enfermedad renal", "Enfermedades autoinmunes, \nendocrinas y metabólicas",
"Enfermedad neurológica", "Otras enfermedades")
data <- data.frame(Freq=c(0 ,0 , 0, 0, 0, 0, 0, 9.1, 0, 3.4, 0, 0, 0, 0, 1.7,
0, 3.4, 4.3, 3.9, 3, 0.8, 1.4, 1.3, 1.6, 14.2, 3.1,
17, 8, 1.7, 4.5, 1.7, 2.8, 30.6, 9.9, 25.2, 13.5,
4.5, 6.3, 1.8, 3.6),
Age=c(rep("0-4", 8), rep("5-17", 8), rep("18-49", 8),
rep("50-64", 8), rep("65+", 8)),
Cond_pre = rep(Enf, 5))
ggplot(subset(data, Freq > 0),
aes(x = Cond_pre, y = Freq, fill = Cond_pre)) +
geom_col() +
facet_grid(~Age, space = "free_x", scales = "free_x", switch = "x") +
scale_x_discrete(name = "Edad", expand = c(0, 1)) +
ylab("Porcentaje de condición preexistente\n") +
scale_fill_manual(values = c("#d53e4f", "#f46d43", "#fdae61", "#fee08b",
"#abdda4", "#66c2a5", "#3288bd", "#9970ab")) +
labs(title="\nPorcentaje de condición preexistente",
subtitle = "",
caption = "Datos: Anónimo (2023)\n",
fill= "Condición preexistente") +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.spacing = unit(0, "pt"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
legend.position = c(.42, .90),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1),
panel.background = element_rect(fill = "white", colour = "white")
)
setwd("/Users/fv/Documents/R/ABRIL_2023/British Virgin Islands UPDATE")
library("marmap")
library("dplyr")
library("readxl")
library("sf")
library("ggplot2")
library("marmap")
library("dplyr")
library("readxl")
library("sf")
library("ggplot2")
# MARMAP
CAbig <- getNOAA.bathy(-125, -115, 30, 45, resolution = 1)
# EXCEL
UrchinDataCA <- read_excel("UrchinDataCA.xlsx")
UrchinDataCA[is.na(UrchinDataCA)] <- 0
A <- filter(UrchinDataCA, MPA_REF=="mpa")
B <- filter(UrchinDataCA, MPA_REF=="reference")
ll <- (UrchinDataCA$STRPURAD)
dd <- (max(ll)/60 - min(ll)/60 )/5
# POINTS
points = st_as_sf(UrchinDataCA, coords=c("long", "lat"))
points <- points %>%
st_set_crs(4326)
points <- st_transform(points, 4326)
# PLOT GGPLOT2
ggplot(CAbig, aes(x=x, y=y)) +
coord_quickmap() +
geom_raster(aes(fill=z), show.legend = F, alpha=.6) +
scale_fill_etopo() +
geom_contour(aes(z=z), breaks=c(0, -10, -20, -50, -100, -200, -1000,
0, 10, 20, 50, 100, 200, 1000), colour="grey", size=0.2) +
geom_point(data=UrchinDataCA, aes(x=long, y=lat, color = MPA_REF,
shape = MPA_REF,
size= (STRPURAD)*0.01),
group = UrchinDataCA$MPA_REF, alpha =.6) +
# MANUAL
scale_size(range = c(3,12), breaks = c(5,10,20,30),
labels =  c(paste("<", round(dd*2,1) ),
paste( round(dd*2,1) ,"-", round(dd*3,1) ),
paste( round(dd*3,1) ,"-", round(dd*4,1) ),
paste(">", round(dd*4,1) ))) +
scale_shape_manual(values = c(16, 19))+
scale_color_manual(values = c('#e41a1c', '#377eb8'))+
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
xlab("Long") +
ylab("Lat")+
ggtitle("Title") +
labs(color = c("MPA_REF")) +
labs(size = c("STRPURAD")) +
guides(shape = FALSE) +
theme(text = element_text(size = 14, face = "bold"),
panel.spacing = unit(0, "pt"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1),
panel.background = element_rect(fill = "white", colour = "white")) +
guides(colour = guide_legend(title = "MPA_REF", face="bold"))
# PLOT GGPLOT2
ggplot(CAbig, aes(x=x, y=y)) +
coord_quickmap() +
geom_raster(aes(fill=z), show.legend = F, alpha=.6) +
scale_fill_etopo() +
geom_contour(aes(z=z), breaks=c(0, -10, -20, -50, -100, -200, -1000,
0, 10, 20, 50, 100, 200, 1000), colour="grey", size=0.2) +
geom_point(data=UrchinDataCA, aes(x=long, y=lat, color = MPA_REF,
shape = MPA_REF,
size= (STRPURAD)*0.01),
group = UrchinDataCA$MPA_REF, alpha =.6) +
scale_size(range = c(3,12), breaks = c(5,10,20,30),
labels =  c(paste("0"),
paste( round(dd*2,1) ,"-", round(dd*3,1) ),
paste( round(dd*3,1) ,"-", round(dd*4,1) ),
paste(">", round(dd*4,1) ))) +
scale_shape_manual(values = c(16, 19))+
scale_color_manual(values = c('#e41a1c', '#377eb8'))+
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
xlab("Long") +
ylab("Lat")+
ggtitle("Title") +
labs(color = c("MPA_REF")) +
labs(size = c("STRPURAD")) +
guides(shape = FALSE) +
theme(text = element_text(size = 14, face = "bold"),
panel.spacing = unit(0, "pt"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1),
panel.background = element_rect(fill = "white", colour = "white")) +
guides(colour = guide_legend(title = "MPA_REF", face="bold"))
ggplot(CAbig, aes(x=x, y=y)) +
coord_quickmap() +
geom_raster(aes(fill=z), show.legend = F, alpha=.6) +
scale_fill_etopo() +
geom_contour(aes(z=z), breaks=c(0, -10, -20, -50, -100, -200, -1000,
0, 10, 20, 50, 100, 200, 1000), colour="grey", size=0.2) +
geom_point(data=A, aes(x=long, y=lat, color = MPA_REF,
shape = MPA_REF,
size= (STRPURAD)*0.01),
group = A$MPA_REF, alpha =.6) +
# MANUAL
scale_size(range = c(3,12), breaks = c(5,10,20,30),
labels =  c(paste("0" ),
paste( round(dd*2,1) ,"-", round(dd*3,1) ),
paste( round(dd*3,1) ,"-", round(dd*4,1) ),
paste(">", round(dd*4,1) ))) +
scale_shape_manual(values = c(16, 19))+
scale_color_manual(values = c('#e41a1c','#377eb8'))+
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
xlab("Long") +
ylab("Lat")+
ggtitle("Title") +
labs(color = c("MPA_REF")) +
labs(size = c("STRPURAD")) +
guides(shape = FALSE) +
theme(text = element_text(size = 14, face = "bold"),
panel.spacing = unit(0, "pt"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1),
panel.background = element_rect(fill = "white", colour = "white")) +
guides(colour = guide_legend(title = "MPA_REF", face="bold"))
setwd("/Users/fv/Desktop/Towers")
library(tidyverse)
library(ggtextures)
library(magick)
library(ggflags)
library(tidyverse)
library(ggtextures)
library(magick)
library(ggflags)
data <- tibble(
count = c(1,1,1,1,1,1),
n = c(634,600,553,540,468,435),
country =c("Japan","China","Canada","Russia","China","Iran"),
code =c("jp","cn","ca","ru","cn","ir"),
animal = c("Tokyo Sky Tree",
"Torre de Televisión\nde Cantón",
"CN Tower",
"Torre Ostankino",
"Torre Perla Oriental",
"Torre Milad"),
image = list(
image_read_svg("images/b_01.svg"),
image_read_svg("images/b_02.svg"),
image_read_svg("images/b_03.svg"),
image_read_svg("images/b_04.svg"),
image_read_svg("images/b_06.svg"),
image_read_svg("images/b_08.svg")
)
)
data <- data %>%
mutate(iso3 = countrycode::countrycode(country,
origin = "country.name.en",
destination = "iso3c"))
# PLOT
ggplot(data, aes(x=reorder(animal,-n), count, image = image)) +
geom_isotype_col() + xlab("") + ylab("")+
labs(title="\nTorres más altas de mundo", subtitle = "\n",
caption = "\n", fill= "Districts") +
geom_flag(aes(x=reorder(animal,-n),  y= -.05,
country=code), size=15 ) +
geom_segment(aes(x = 0, y = (.95), xend = "Torre Milad", yend = (.95)), alpha=.05) +
geom_segment(aes(x = 0, y = ((600*0.95)/634), xend = "Torre Milad", yend = ((600*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((553*0.95)/634), xend = "Torre Milad", yend = ((553*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((540*0.95)/634), xend = "Torre Milad", yend = ((540*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((468*0.95)/634), xend = "Torre Milad", yend = ((468*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((435*0.95)/634), xend = "Torre Milad", yend = ((435*0.95)/634)), alpha=.05) +
annotate(x = .15, y = (1), "text", label= "(m)", fontface =2) +
annotate(x = .15, y = (.96), "text", label= "634", fontface =2) +
annotate(x = .15, y = ((600*0.95)/634) + 0.01, "text", label= "600", fontface =2) +
annotate(x = .15, y = ((553*0.95)/634) + 0.01, "text", label= "553", fontface =2) +
annotate(x = .15, y = ((540*0.95)/634) + 0.01, "text", label= "540", fontface =2) +
annotate(x = .15, y = ((468*0.95)/634) + 0.01, "text", label= "468", fontface =2) +
annotate(x = .15, y = ((435*0.95)/634) + 0.01, "text", label= "435", fontface =2) +
theme(text = element_text(size = 14, face = "bold"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.spacing = unit(0, "pt"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1),
panel.background = element_rect(fill = "white", colour = "white")) +
guides(colour = guide_legend(title = "Location type", face="bold",
override.aes = list(size=6,linetype=0)))
setwd("/Users/fv/Desktop/Towers")
{
library(tidyverse)
library(ggtextures)
library(magick)
library(ggflags)
}
data <- tibble(
count = c(1,1,1,1,1,1),
n = c(634,600,553,540,468,435),
country =c("Japan","China","Canada","Russia","China","Iran"),
code =c("jp","cn","ca","ru","cn","ir"),
animal = c("Tokyo Sky Tree",
"Torre de Televisión\nde Cantón",
"CN Tower",
"Torre Ostankino",
"Torre Perla Oriental",
"Torre Milad"),
image = list(
image_read_svg("images/b_01.svg"),
image_read_svg("images/b_02.svg"),
image_read_svg("images/b_03.svg"),
image_read_svg("images/b_04.svg"),
image_read_svg("images/b_06.svg"),
image_read_svg("images/b_08.svg")
)
)
data <- data %>%
mutate(iso3 = countrycode::countrycode(country,
origin = "country.name.en",
destination = "iso3c"))
# PLOT
ggplot(data, aes(x=reorder(animal,-n), count, image = image)) +
geom_isotype_col() + xlab("") + ylab("")+
labs(title="\nTorres más altas de mundo", subtitle = "\n",
caption = "\n", fill= "Districts") +
geom_flag(aes(x=reorder(animal,-n),  y= -.05,
country=code), size=15 ) +
geom_segment(aes(x = 0, y = (.95), xend = "Torre Milad", yend = (.95)), alpha=.05) +
geom_segment(aes(x = 0, y = ((600*0.95)/634), xend = "Torre Milad", yend = ((600*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((553*0.95)/634), xend = "Torre Milad", yend = ((553*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((540*0.95)/634), xend = "Torre Milad", yend = ((540*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((468*0.95)/634), xend = "Torre Milad", yend = ((468*0.95)/634)), alpha=.05) +
geom_segment(aes(x = 0, y = ((435*0.95)/634), xend = "Torre Milad", yend = ((435*0.95)/634)), alpha=.05) +
annotate(x = .15, y = (1), "text", label= "(m)", fontface =2) +
annotate(x = .15, y = (.96), "text", label= "634", fontface =2) +
annotate(x = .15, y = ((600*0.95)/634) + 0.01, "text", label= "600", fontface =2) +
annotate(x = .15, y = ((553*0.95)/634) + 0.01, "text", label= "553", fontface =2) +
annotate(x = .15, y = ((540*0.95)/634) + 0.01, "text", label= "540", fontface =2) +
annotate(x = .15, y = ((468*0.95)/634) + 0.01, "text", label= "468", fontface =2) +
annotate(x = .15, y = ((435*0.95)/634) + 0.01, "text", label= "435", fontface =2) +
theme(text = element_text(size = 14, face = "bold"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.spacing = unit(0, "pt"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(colour = "black"),
plot.title = element_text(size = 20, face="bold", hjust = 0.5),
plot.subtitle = element_text(size = 16, face="bold", hjust = 0.5),
plot.caption = element_text(size = 10, face="bold", hjust = 1),
panel.background = element_rect(fill = "white", colour = "white")) +
guides(colour = guide_legend(title = "Location type", face="bold",
override.aes = list(size=6,linetype=0)))
library(tidyverse)
library(ggoxford)
library(ggtext)
wpop2013 <-
tidyr::population %>%
filter(year == 2013) %>%
#  filter(population > 1e6) %>%
mutate(iso3 = countrycode::countrycode(country,
origin = "country.name.en",
destination = "iso3c")
) %>%
slice(1:10)
head(wpop2013,10)
library(countrycode)
ggplot(data = wpop2013 ,
aes(x = iso3, y = population)) +
geom_bar(stat = "identity") +
theme_minimal() +
geom_axis_flags(breaks = wpop2013$iso3,
labels = wpop2013$country,
country_icons = wpop2013$iso3,
width = 30,
lineheight = 2,
fontface = "bold"
)
install.packages("devtools", repos = "https://cran.rstudio.com")
devtools::install_github('JohnCoene/grapher', dependencies = c("Depends", "Imports"))
library(grapher)
library(tidygraph)
library(tidygraph)
play_smallworld(1, 100, 3, 0.05) %>%
activate(nodes) %>%
mutate(
id = 1:n(), # add id
group = group_walktrap()
) %>%
graph() %>%
scale_node_color(group)
install.packages("tidygraph")
library(tidygraph)
play_smallworld(1, 100, 3, 0.05) %>%
activate(nodes) %>%
mutate(
id = 1:n(), # add id
group = group_walktrap()
) %>%
graph() %>%
scale_node_color(group)
g <- make_data(2000)
graph(g) %>%
graph_offline_layout() %>%
scale_link_color_coords()
# generate mock data
g <- make_data(200)
# grapher defaults to live layout
graph(g)
# customise the live layout parameters
graph(g) %>%
graph_layout_live(gravity = -3)
graph(g) %>%
graph_layout_live() %>%
graph_layout_stable(ms = 4000)
library(tidygraph)
play_smallworld(1, 100, 3, 0.05) %>%
activate(nodes) %>%
mutate(
id = 1:n(), # add id
group = group_walktrap()
) %>%
graph() %>%
scale_node_color(group)
graph(g) %>%
graph_cluster() %>%
scale_node_color(cluster, palette = c("red", "white", "blue"))
graph(g) %>%
graph_static_layout() %>%
scale_node_color_coords()
library(grapher)
g <- make_data(50) # mock data
# from a list
graph(g)
# from igraph
ig <- igraph::make_ring(10)
graph(ig)
# from tidygraph
tbl_graph <- tidygraph::create_ring(20)
graph(tbl_graph)
# from gexf
graph("http://gephi.org/datasets/LesMiserables.gexf")
# from dot file
fl <- system.file("example/dotfile.gv", package = "grapher")
graph(fl)
# from single data.frame
# assumes they are links
graph(g$links)
# from data.frames
# pass only links
graph() %>%
graph_links(g$links, source, target)
# pass nodes and links
graph() %>%
graph_nodes(g$nodes, id) %>%
graph_links(g$links, source, target)
library(shiny)
gdata <- make_data(100)
library(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny)
gdata <- make_data(100)
library(grapher)
gdata <- make_data(100)
ui <- fluidPage(
sliderInput("node", "node to focus on", 1, max = 100, value = 5),
graphOutput("g", height = "80vh")
)
server <- function(input, output) {
output$g <- render_graph({
graph(gdata) %>%
graph_stable_layout(ms = 1500)
})
observeEvent(input$node, {
graph_proxy("g") %>%
graph_focus_node(input$node)
})
}
shinyApp(ui, server)
graph_data <- make_data()
graph() %>%
graph_nodes(graph_data$nodes, id)
# using a shiny proxy
library(shiny)
data1 <- make_data(150)
data2 <- make_data(50)
# nodes that do not overalp
# 120 = 30 new nodes added
noverlap <- 120
data2$nodes$id <- as.integer(data2$nodes$id) + noverlap
data2$links$source <- as.integer(data2$links$source) + noverlap
data2$links$target <- as.integer(data2$links$target) + noverlap
ui <- fluidPage(
actionButton("add", "add"),
graphOutput("g", height = "90vh")
)
server <- function(input, output) {
output$g <- render_graph({
graph(data1)
})
observeEvent(input$add, {
graph_proxy("g") %>%
graph_nodes(data2$nodes, id) %>%
graph_links(data2$links, source, target)
})
}
shinyApp(ui, server)
# preview_palettes
graph_palette()
graph_palette_light()
graph_data <- make_data(200)
graph_data %>%
graph() %>%
graph_cluster() %>%
scale_link_color(cluster, palette = graph_palette_light())
server <- function(input, output) {
output$g <- render_graph({
graph(data1)
})
observeEvent(input$add, {
graph_proxy("g") %>%
graph_nodes(data2$nodes, id) %>%
graph_links(data2$links, source, target)
})
}
shinyApp(ui, server)
graph_live_layout(
g,
spring_length = 30L,
sping_coeff = 8e-04,
gravity = -1.2,
theta = 0.8,
drag_coeff = 0.02,
time_step = 20L,
is_3d = TRUE
)
graph_layout_live(
g,
spring_length = 30L,
sping_coeff = 8e-04,
gravity = -1.2,
theta = 0.8,
drag_coeff = 0.02,
time_step = 20L,
is_3d = TRUE
)
setwd("/Users/fv/Desktop/Towers/images")
